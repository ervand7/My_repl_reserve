# Я работаю секретарем и мне постоянно приходят различные документы. Я должен быть очень внимателен чтобы не потерять ни один документ.
# Необходимо реализовать пользовательские команды, которые будут выполнять следующие функции:

# p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
# s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится;
# Правильно обработайте ситуации, когда пользователь будет вводить несуществующий документ.
# l– list – команда, которая выведет список всех документов в формате passport "2207 876234" "Василий Гупкин";
# a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться. Корректно обработайте ситуацию, когда пользователь будет пытаться добавить документ на несуществующую полку.
# Внимание: p, s, l, a - это пользовательские команды, а не названия функций. Функции должны иметь выразительное название, передающие её действие.





# Каталог документов представлен в следующем виде:

documents = [
  {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
  {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
  {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"}
]

# Перечень полок, на которых находятся документы хранится в следующем виде:

directories = {
  '1': ['2207 876234', '11-2'],
  '2': ['10006'],
  '3': []
}




# Решение задачи:
# Будем поэтапно решать. Для каждой пользовательской команды будем писать отдельный блок.
# Разбираем форму изложения материала. documents - это список, внутри которого словарь, где есть 3 пары (ключ(<class 'str'>): значение(<class 'str'>)). directories - это словарь, ключом которого является str, а значением является список. Надо обратить внимание, что в первом случае - это список из 2 элементов, во втором из 1, а в третьем случае он пустой

# создаем функцию для получения имени. В качестве аргумента выбираем "номер" - так как это и будет облась поиска (обработки). От ввода этого "номера" и будет зависеть результат. Запускаем цикл для каждого документа в списке документов. Ставим условие: если "номер" будет равен номеру итерируемого документа (простыми словами - номера документов), то в результате мы получим имя документа. 

# p – people – команда, которая спросит номер документа и выведет имя человека, которому он принадлежит;
# documents = [
#   {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
#   {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
#   {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"}
# ]
# def get_people_name(doc_number):
#   for document in documents:
#     if doc_number == document['number']:
#       return document['name']
#   return
# doc_number = str(input('Введите номер документа: '))
# print(get_people_name(doc_number))





# s – shelf – команда, которая спросит номер документа и выведет номер полки, на которой он находится;

# directories = {
#   '1': ['2207 876234', '11-2'],
#   '2': ['10006'],
#   '3': []
# }

# def get_dir_number(doc_number):
#   for number_of_the_directory, full_list_of_the_documents in directories.items():
#     if doc_number in full_list_of_the_documents:
#       return number_of_the_directory
#   return
# doc_number = (input('Введите номер документа: '))
# print(get_dir_number(doc_number))

# ИЛИ СОКРАЩЕННЫЙ ВАРИАНТ ПРАВОПИСАНИЯ
# def get_dir_number(doc_number):
#   for a, b in directories.items():
#     if doc_number in b:
#       return a
#   return
# doc_number = (input('Введите номер документа: '))
# print(get_dir_number(doc_number))

#  ВАРИАНТ, ПОНЯТНЫЙ МНЕ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# def get_dir_number(doc_number):
#   for key, value in directories.items():
#     if doc_number in value:
#       return key
#   return
# doc_number = (input('Введите номер документа: '))
# print(get_dir_number(doc_number))






# l– list – команда, которая выведет список всех документов в формате passport "2207 876234" "Василий Гупкин";

# documents = [
#   {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
#   {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
#   {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"}
# ]

# def get_people_name(doc_number):
#   for document in documents:
#     if doc_number == document['number']:
#       return (document["type"], document['number'], document['name'])
#   return
# doc_number = str(input('Введите номер документа: '))
# print(get_people_name(doc_number))






# a – add – команда, которая добавит новый документ в каталог и в перечень полок, спросив его номер, тип, имя владельца и номер полки, на котором он будет храниться. Корректно обработайте ситуацию, когда пользователь будет пытаться добавить документ на несуществующую полку.

# Каталог документов представлен в следующем виде:

documents = [
  {"type": "passport", "number": "2207 876234", "name": "Василий Гупкин"},
  {"type": "invoice", "number": "11-2", "name": "Геннадий Покемонов"},
  {"type": "insurance", "number": "10006", "name": "Аристарх Павлов"}
]

# Перечень полок, на которых находятся документы хранится в следующем виде:

directories = {
  '1': ['2207 876234', '11-2'],
  '2': ['10006'],
  '3': []
}

# Попробуем пока без полок
# План действий: создаем пустой словарь, чтобы потом его добавить в исходныйе список. Даем пользователю совершить 3 ввода. Склеиваем все в future_dic. Иеперь нам нужна функция, которая добавит новый словарт в каталог (в общий список documents). Для этого мы задаем название "добавление документа". В аргументе пишем то, что система спрашивает перед добавлением. А спрашивать она у нас будет просто да или нет.
future_dic = {}
a = str(input('Введите номер документа: '))
a1 = {"number": a}
print(a1)
b = str(input('Введите тип документа: '))
b1 = {"type": b}
print(b1)
c = str(input('Введите имя владельца документа: '))
c1 = {"name": c}
print(c1)
d = int(input('Введите номер полки для документа: '))
d1 = {"shelf_number": d}
future_dic = {**a1, **b1, **c1, **d1}
print(f'\nНовый список получился таким:\n{future_dic}')

# хочу сделать так, чтобы при пользовательском вводе цифры 1 future_dic автоматически добавлялся в исходный. Создаем переменную a2 (это будет пользовательский ввод).
# documents.append(future_dic)
# print(documents)





a2 = int(input('\nЕсли хотите добавить новый список в общую папку, нажмите цифру "1": '))


if a2 == 1:
  documents.append(future_dic)
  print(f'\nОбщий список документов теперь выглядит так: \n{documents}')
else:
  print('Вы не нажали цифру "1". Документ не будет добавлен в общий список.')

print('\nВот обновленный список полок, содержащий наш новый документ:')


# if d == 3:
#   directories['3'] = int(a)
#   print(directories)
# elif d == 2:
#   directories['2'] = int(a)
#   print(directories)
# elif d == 1:
#   directories['1'] = int(a)
#   print(directories)
# else:
#   print('Такой полки не существут')



if d == 3:
  directories['3'].append(a)
  print(directories)
elif d == 2:
  directories['2'].append(a)
  print(directories)
elif d == 1:
  directories['1'].append(a)
  print(directories)
else:
  print('Такой полки не существут')



# commands = {'l': print_list, 'sp': print_dir, 'p': print_people, 's': print_shelf, 'a': add_docs, 'd': del_doc, 'm': move_doc_shelf, 'as': add_shelf, 'i': inspection_doc, 'pa': print_all_people, 'q': None}

