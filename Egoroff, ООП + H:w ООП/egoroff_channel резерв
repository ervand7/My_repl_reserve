# фишки ООП от selfedu |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
from pprint import pprint

class Point:
  'Класс для проставления координат точек на плоскости'
  x = 1
  y = 1

print(Point.__doc__)
print(Point.__name__)
pprint(dir(Point))
print()
pprint(Point.__dict__)

pt = Point()
print(id(pt), id(Point), sep = '\n')

print(getattr(pt, 'x'))
print(getattr(pt, 'z', False))
print(hasattr(pt, 'y'))
setattr(pt, 'r', 7)
print(pt.__dict__)
print(isinstance(pt, Point))
# или проще
Point.x = 100
pt.msg = 'hello'
del Point.x

# issubclass
class Person:
  pass
class Doctor(Person):
  pass
print(issubclass(Doctor, Person))
# фишки ООП от selfedu |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# Конструктор и деструктор |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
class Point:
  def __init__(self, x=0, y=0):
    self.x = x
    self.y = y

  def __del__(self):
    print('Удаление экземпляра: '+self.__str__())

pt = Point()
# Конструктор и деструктор |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

#  Урок №7 Практика. Создание класса и его методов|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
from math import sqrt

class Point:

    list_points = []

    def __init__(self, coord_x=0, coord_y=0):
        self.x = coord_x
        self.y = coord_y
        Point.list_points.append(self) # вот таким образом мы можем достучаться до переменых в функциях
        print(Point.list_points)

    def move_to(self, new_x, new_y):
        self.x = new_x
        self.y = new_y

    def go_home(self):
        self.x = 0
        self.y = 0

    def print_point(self):
        print(f'Точка с координатами ({self.x}, {self.y})')

    def calc_distance(self, another_point):
        if not isinstance(another_point, Point):
            raise ValueError('Аргумент должен принадлежать классу Точка')
        return sqrt ((self.x - another_point.x) **2 + (self.y - another_point.y) **2)
p5 = Point()
p5.print_point()
p5.move_to(7, -43)
p5.print_point()

p7 = Point(6, 0)
p8 = Point(0, 8)

print(p7.calc_distance(p8))
#  Урок №7 Практика. Создание класса и его методов|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

#  Урок №8 МОНОСОСТОЯНИЕ |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Данный пример нужно запускать в консоли. Смысл в том, что изменяя значение атрибута одного экземпляра мы можем изменять сразу все значения атрибутов других экземпляров в классе
# Здесь работает жесткая схема, ее просто надо выучить:
class Cat: # сразу после объявления класса, еще до создания методов пришем приватную переменную, которая будет равна словарю, в котором прописываются атрибуты и их значения(аргументы)
    __shared_attr = { # Обязательно должна быть приватная переменная
        'breed': 'pers',
        'color': 'black'
    }
# далее все это инициализируется.
    def __init__(self):
        self.__dict__ = Cat.__shared_attr

d = Cat()
g = Cat()

d.breed = 'siam'
d.name = 'Bob'

h = Cat()
#  Урок №8 МОНОСОСТОЯНИЕ |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

#  Урок №9 Инкапсуляция |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Инкапсуляция - это сокрытие
# Public, protected and private attr and methods
# Данный код правильно написан. Он выдает и данные и ошибку доступа
class BankAccount:

    def __init__(self, name, balance, passport):
        self.__name = name
        self.__balance = balance
        self.__passport = passport

    def print_private_data(self):
        print(self.__name, self.__balance, self.__passport)
# Приватными могут быть и методы
    def __print_private_data(self):
        print(self.__name, self.__balance, self.__passport)

account1 = BankAccount('Bob', 10000, 4545454545)
account1.print_private_data() # Вне класса получаем доступ, так как сам метод - публичный
# account1.__print_private_data() # Доступ вне класса запрещен к приватным методам!
# Вне класса доступ к атрибутам запрещен
# print(account1.__name) # Доступ зпрещен!
# print(account1.__balance) # Доступ зпрещен!
# print(account1.__passport) # Доступ зпрещен!

# Но есть 2 способа из вне класса получить доступ к приватным методам
account1._BankAccount__print_private_data() # Чеоный метод №1
print(account1._BankAccount__balance) # Чеоный метод №2
# Чтобы полностью доступ закрыть нужно воспользоваться accessify и его декораторами protected and private, но это нужно гуглить
#  Урок №9 Инкапсуляция |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

#  Урок №10 Property, getter-метод и setter-метод |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

class BankAccount:
    def __init__(self, name, balance):
        self.name = name
        self.__balance = balance

    def get_balance(self):
        print('get balance method')
        return self.__balance

    def set_balance(self, value):
        print('set balance method')
        if not isinstance(value, (int, float)):
            raise ValueError('Баланс должен быть числом')
        self.__balance = value

    def delete_balance(self):
        print('delete balance method')
        del self.__balance
# property - это фишка питона по созданию свойства. Используется с комбинацией fget и fset, можно также туда добавить и fdel
# План создания такой: 
#1) Прописываем название нашего свойства. Помним, что это св-во будет выполнять одновременно множество функций
#2) Прописываем, что наше св-во равно property и открываем скобки. 
# Пример: balance = property( 
#3) Прописываем внутри скобок fget, fset, fdel и приравниваем их к нужным нам методам. Например: fget=get_balance, fset=set_balance и тд.
#4) И в. итоге мы получаем:
    balance = property(fget=get_balance, fset=set_balance, fdel=delete_balance)
#5) Важно!!! При вызове свойства мы не используем (). Пример: del d.balance
d = BankAccount('Masha', 400)
print(d.balance) # тут мы применяем метод get_balance. Обратите внимание, что balance - это свойство,
# а не что либо другое. Мы к нему обращаемся без вызова ()
d.balance = 789 # тут мы применяем метод set_balance
# d.balance =  'qwe' # Проверяем на правильность ввода данных
del d.balance # проверяем работу метода delete_balance
d.balance = 8 # снова используем set_balance
print(d.balance) # снова используем get_balance
del d.balance # проверяем работу метода delete_balance
print(d.balance) # пытаемся использовать get_balance и получаем ошибку
#  Урок №10 Property, getter-метод и setter-метод |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# Урок №25 Наследования |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
class Person: # parent
    def can_think(self):
        print('Я могу думать')

    def can_walk(self):
        print('Я могу ходить')

class Doctor(Person): #subclass
    def can_cure(self):
        print('Я могу лечить')

class Ortoped(Doctor):
    pass

class Architect(Person): #subclass
    def can_build(self):
        print('Я могу построить здание')

d = Doctor()
d.can_cure()
d.can_think()
d.can_walk()
print()
a = Architect()
a.can_build()
a.can_think()
a.can_walk()
print()
e = Ortoped()
e.can_walk()
e.can_think()
e.can_cure()
print()
print(issubclass(Doctor, Person))
print(isinstance(d, Person))
# Урок №25 Наследования |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\
# Урок №26 АЗЫ АЗОВ!!!! Наследование от object и от других встроенных типов. object parent class Python
from pprint import pprint

class Person:
    pass

class Mylist(list):
    pass

class Doctor(Person):
    pass

class Architect(Person):
    pass

# в Python все является object
print(isinstance((3,4), object))
print(issubclass(int, object))
print(isinstance(int, object))
print(issubclass(Person, object))
# pprint(dir(object))
pprint(dir(Person))

t = Mylist()
print(t)
# Урок №26  АЗЫ АЗОВ!!!! Наследование от object и от других встроенных типов. object parent class Python

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\

# Урок №27 Переопределение методов в Python. Methop overriding in Python
# Переопределить метод - это значит внутри дочернего класса создать метод с таким же названием, как и у родительского класса, но задать ему совершенно другое поведение.

# Переопределить атрибут - это значит внутри дочернего класса создать атрибут с таким же названием, как и у родительского класса, но задать ему совершенно другое значение.
class Person:

    def __init__(self, name):
        # print('init вызывается у Person')
        self.name = name


    def breathe(self):
        print('Человек дышит')

    def walk(self):
         print('Человек идет')

    def __str__(self):
        return  f'Person {self.name}'

    def sleep(self):
        print('Человек спит')

    def combo(self):
        self.breathe()
        self.walk()
        self.sleep()

class Doctor(Person): # subclass
    def breathe(self):
        print('Доктор дышит')

    def __str__(self):
        return  f'Doctor {self.name}'

d = Doctor('John')
p = Person('Adam')
print(p.name, d.name)
d.combo()
# Урок №27 Переопределение методов в Python. Methop overriding in Python
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\

# Урок Полиморфизм |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# !!!!!!!!!!! Вариант 1 - порочная практика. Из-за этого и придумали полиморфизм!!!!!!!
class Rectangle: # прямоугольник
    def __init__(self, w, h):
        self.w = w
        self.h = h

    def getPerRectangle(self): # метод возвращает периметр прямоугольника
        return 2 * (self.w + self.h)

class Square: # квадрат
    def __init__(self, a):
        self.a = a

    def getPerSq(self):  # метод возвращает периметр квадрата
        return 4 * self.a

r1 = Rectangle(1, 2)
r2 = Rectangle(3, 4)
print(r1.getPerRectangle(), r2.getPerRectangle())

s1 = Square(10)
s2 = Square(20)
print(s1.getPerSq(), s2.getPerSq())

geom = [r1, r2, s1, s2]
# Ниже указана ПОРОЧНАЯ, плохая практика в программировании
for g in geom:
    if isinstance(g, Rectangle):
        print(g.getPerRectangle())
    else:
        print(g.getPerSq())

# !!!!!!!!!!! Вариант 2 - хороший вариант с применением полиморфизма!!!!!!!
class Rectangle: # прямоугольник
    def __init__(self, w, h):
        self.w = w
        self.h = h

    def get_we_need(self): # метод возвращает периметр прямоугольника
        return 2 * (self.w + self.h)

class Square: # квадрат
    def __init__(self, a):
        self.a = a

    def get_we_need(self):  # метод возвращает периметр квадрата
        return 4 * self.a

class Triangle: # треугольник
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def get_we_need(self):  # метод возвращает сумму всех сторон треугольника
        return self.a + self.b + self.c

# Полиморфизм - это то, что мы всем этим трём методам дали одинаковое название get_we_need. И все!

r1 = Rectangle(1, 2)
r2 = Rectangle(3, 4)

s1 = Square(10)
s2 = Square(20)

t1 = Triangle(1, 2, 3)
t2 = Triangle(4, 5, 6)

geom = [r1, r2, s1, s2, t1, t2]
# Ниже указана нормальная практика с применением полиморфизма
for g in geom:
    print(g.get_we_need())
# Урок Полиморфизм |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# Урок №28 Extending |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# extending - это не что иное как создание в дочернем классе атрибутов, которых нет в родительском
# Урок №28 Extending |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Урок №30 Множественное наследование. __mro__. Multiple inheritance in Python
# Смысл в том, что сначала при вызове одинаковых методов родительских классов система сначала будет
# искать в классе, который первым прописан как родитель
from pprint import pprint
# Правило использования super(): 
#1) Пришем super(). точку обязательно ставим
#2) Прописываем метод родительского класса, который хотим вызвать
#3) Прописываем, если нужно, в скобках аргументы этого матода родительского класса
class Doctor:
    def can_cure(self):
        print('Я доктор, я умею лечить')

    def graduate(self):
        print('Ура! Я отучился на доктора')

    def can_build(self):
        print('Я доктор, я тоже умею строить, но не очень')


class Builder:
    def can_build(self):
        print('Я строитель, я умею строить')

    def graduate(self):
        print('Ура! Я отучился на строителя')

class Person(Doctor, Builder):
    def graduate(self):
        print('Посмотрим, кем я стал')
        super().graduate()
        Builder.graduate(self) # это нужно в том лишь случае6 если мы хотим, чтобы вывелся метод и
        # у второго записанного родителя


s = Person()
s.can_build()
# s.can_cure()
pprint(Person.__mro__)
s.graduate()
# Урок №30 Множественное наследование. __mro__. Multiple inheritance in Python
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Урок №29 Делегирование в Python. Функция super(). Delegating methods in python
# Функция super() позволяет вызвать в дочернем классе помимо текущей функции вызвать одноименную функцию родительского класса (другими словами - произвести делегирование).
# Сначала пишем super(), потом через точку пишем название функции из родительского класса, которую мы хотим вызвать. Принято вызывать эту функцию 
# до исполнения аналогичной в дочернем классе
class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname

    def breathe(self):
        print('Человек дышит')


class Doctor(Person):
    def __init__(self, name, surname, age):
        super().__init__(name, surname) # Также мы применяем super(), чтобы избежать дублирование кода
        self.age = age

    def breathe(self):
        super().breathe()
        print('Доктор дышит')

p = Person('Ivan', 'Ivanov')
d = Doctor('Petr', 'Petrov', 25)
# d.breathe()
print(p.name, p.surname)
print(d.name, d.surname, d.age)
# Урок №29 Делегирование в Python. Функция super(). Delegating methods in python
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Урок №15 ООП Магические методы __str__ и __repr__
# __repr__ нужен для того, чтобы предоставлять информацию строкой для разработчиков
# __str__ нужен для того, чтобы предоставлять информацию строкой для пользователей
class Lion:
    def __init__(self, name):
        self.name = name

    # def __repr__(self):
    #     return f'The object Lion - {self.name}'

    def __str__(self):
        return f'Lion - {self.name}'


l = Lion('Simba')
w = Lion('Vasya')
print(l)
print(w)
# Урок №15 ООП Магические методы __str__ и __repr__
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Урок №16 Магические методы __len__ и. __abs__ (Dunder methods)
class Person:
    def __init__(self, name, surname):
      self.name = name
      self.surname = surname

    def __len__(self):
        return len(self.name + self.surname) # Конкатенация

a = Person('qwe', 'asd')
print(a.__len__())
print()

class Otrezok:
    def __init__(self, point1, point2):
        self.x1 = point1
        self.x2 = point2

    def __len__(self):
        return abs(self) # self.__abs__()

    def __abs__(self): # В данном примере мы используем __abs__ для вычитания из меньшего числа большего числа, а также , если одно из значений отрицательное
        return abs(self.x2 - self.x1)

q = Otrezok(3, 9)
print(len(q))
# или
print(q.__len__())

w = Otrezok(10, 2)
print(len(w))
# или
print(w.__len__())
# Урок №16 Магические методы __len__ и. __abs__ (Dunder methods)
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|

# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
# Урок: Магический метод __str__
class Person:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname

    def __str__(self):
        return f'Doctor {self.name}'

# Вот для чего нужна функция __str__. Чтобы как и функция __init__ автоматически вызывалась и мгновенно исполняла свою задачу
# Вот основной пример использования
a = Person('qwe', 'ewq')
print(a)
# или
# print(a.__str__())
# Урок: Магический метод __str__
# |\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|\|
